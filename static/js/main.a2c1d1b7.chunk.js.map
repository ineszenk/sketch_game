{"version":3,"sources":["Round.js","helpers.js","Components/Control.js","timer.js","Components/Canvas.js","reducer.js","Game.js","App.js","reportWebVitals.js","Components/TypedReact.js","Home.js","root.js","index.js"],"names":["RoundContext","React","createContext","Round","labelToDraw","Provider","value","getPrediction","theCanvas","model","canvas","tensor","tf","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","prediction","a","ControlContext","Controls","labels","useState","setPredict","seconds","setSeconds","next","useContext","GameContext","setTimeout","useTimer","timer","setPrediction","dispatch","useEffect","clearInterval","type","console","log","className","onClick","alert","Canvas","forwardRef","props","ref","lastX","lastY","mouseDown","context","getContext","fillStyle","fillRect","height","width","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","pointReducer","pointsState","action","process","require","createRef","Game","currentRound","setCurrentRound","Array","apply","length","map","round","index","useRounds","rounds","reset","useReducer","points","class","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","TypedReactDemo","options","strings","this","typeSpeed","showCursor","typed","Typed","el","destroy","style","whiteSpace","Component","Home","Root","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2c1d1b7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst RoundContext = React.createContext({});\n\n// Use Round Custom Hook\nfunction useRounds(labels) {\n  let [currentRound, setCurrentRound] = useState(0);\n\n  const rounds = Array.apply(null, {\n    length: labels.length\n  }).map((round, index) => <Round labelToDraw={labels[index]} />);\n\n  return [\n    rounds,\n    currentRound,\n    () =>\n      currentRound < 10\n        ? setCurrentRound(currentRound + 1)\n        : setCurrentRound(currentRound),\n    () => setCurrentRound(0)\n  ];\n}\n\nfunction Round({ labelToDraw }) {\n  return (\n    <div>\n      <RoundContext.Provider value={{ labelToDraw }}>\n        <p>Please draw a {labelToDraw} </p>\n      </RoundContext.Provider>\n    </div>\n  );\n}\n\nexport { Round, useRounds, RoundContext };\n","import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf\n    .browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas);\n  return model\n    .then(loadedModel => loadedModel.predict(tensor).data())\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { getPrediction } from \"../helpers.js\";\nimport { GameContext } from \"../Game\";\nimport { useTimer } from \"../timer\";\n\nconst ControlContext = React.createContext({});\n\nfunction Controls({ theCanvas, model, labels }) {\n  let [predict, setPredict] = useState(false);\n  const [timer, seconds] = useTimer({ predict, setPredict });\n\n  let [Prediction, setPrediction] = useState(\"\"); // Sets default label to empty string.\n\n  let { next, current, dispatch } = useContext(GameContext);\n\n  useEffect(() => {\n    if (current + 1 < 10) {\n      clearInterval(timer);\n      getPrediction(theCanvas, model).then(prediction => {\n        setPrediction(labels[prediction[0]]);\n        if (labels[prediction[0]] === labels[current]) {\n          seconds <= 5\n            ? dispatch({ type: \"increment\" })\n            : dispatch({ type: \"bonus\" });\n          next();\n          setPredict(true);\n        } else {\n          console.log(\"Try Again !\");\n        }\n      });\n    }\n  });\n  return (\n    <div>\n      <ControlContext.Provider value={(theCanvas, model, labels)}>\n        <div className=\"button_game\">\n          <p> Hurry up,</p>\n          <p> you have {seconds} seconds left ! </p>\n          <button\n            onClick={() => {\n              if (current + 1 <= 10) {\n                getPrediction(theCanvas, model).then(prediction => {\n                  setPrediction(labels[prediction[0]]);\n                  setPredict(true);\n                  if (labels[prediction[0]] === labels[current]) {\n                    seconds <= 5\n                      ? dispatch({ type: \"increment\" })\n                      : dispatch({ type: \"bonus\" });\n                    next();\n                  } else {\n                    alert(\"Sorry but no...try harder next round !\");\n                    next();\n                  }\n                });\n              }\n            }}\n          >\n            Submit early{\" \"}\n          </button>\n        </div>\n      </ControlContext.Provider>\n    </div>\n  );\n}\n\nexport { Controls, ControlContext };\n","import { useContext, useState } from \"react\";\nimport { GameContext } from \"./Game\";\n\nexport function useTimer({ setPredict, predict }) {\n  const [seconds, setSeconds] = useState(20);\n  let { next } = useContext(GameContext);\n\n  const timer = setTimeout(() => {\n    if (seconds === 0) {\n      setSeconds(20);\n      next();\n    }\n    if (predict && seconds !== 0) {\n      setSeconds(20);\n      setPredict(false);\n    } else if (!predict && seconds !== 0) {\n      setSeconds(seconds - 1);\n    }\n  }, 1000);\n\n  return [timer, seconds];\n}\n","import React, { useEffect } from \"react\";\n\nconst Canvas = React.forwardRef((props, ref) => {\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    mouseDown = false;\n    [lastX, lastY] = [undefined, undefined];\n  };\n\n  const handleMousemove = e => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  });\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={ref}\n      onMouseDown={() => (mouseDown = true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={e => handleMousemove(e)}\n    />\n  );\n});\n\nexport { Canvas };\n","const initialPoints = 0;\n\nexport function pointReducer(pointsState, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialPoints;\n    case \"increment\":\n      return pointsState + 1;\n    case \"bonus\":\n      return pointsState + 2;\n    case \"decrement\":\n      return pointsState - 1;\n    default:\n      return pointsState;\n  }\n}\n","import React, { useReducer } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { useRounds } from \"./Round\";\nimport { Controls } from \"./Components/Control\";\nimport { Canvas } from \"./Components/Canvas\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport { pointReducer } from \"./reducer\";\n\nconst model = tf.loadLayersModel(process.env.PUBLIC_URL + \"/model/model.json\");\nconst labels = require(\"./labels.json\");\nlet ref = React.createRef();\nconst GameContext = React.createContext({});\n\nfunction Game() {\n  const [rounds, current, next, reset] = useRounds(labels);\n  const [points, dispatch] = useReducer(pointReducer, 0);\n  console.log(current);\n  return (\n    <div>\n      {current > 9 ? (\n        <div class=\"nes-container is-dark with-title\">\n          <h1 class=\"title\">Sketch - End of the game</h1>\n          <div>\n            {points > 5 ? (\n              <div>\n                <p>You Win, well done !</p>\n                <button type=\"button\" class=\"nes-btn is-success\">\n                  You have scored {points}\n                </button>\n                <Link to=\"/Home\">\n                  <button type=\"button\" class=\"primary\">\n                    Click to try again !\n                  </button>\n                </Link>\n              </div>\n            ) : (\n              <div>\n                <h1>You've lost</h1>\n\n                <p>Hmm...pretty sure you can do better!</p>\n                <button type=\"button\" class=\"nes-btn is-error\">\n                  You have scored {points}\n                </button>\n                <Link to=\"/Home\">\n                  <button type=\"button\" class=\"primary\">\n                    Click to try again !\n                  </button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div class=\"nes-container is-dark with-title\">\n          <h1 class=\"title\">Sketch - Round {current + 1} of 10</h1>\n          <Link to=\"/Home\">\n            <button type=\"button\" class=\"primary\" onClick={() => reset()}>\n              Home\n            </button>\n          </Link>\n          <div className=\"GameContainer\">\n            <GameContext.Provider\n              value={{\n                points,\n                labels,\n                rounds,\n                current,\n                next,\n                reset,\n                dispatch,\n                ref,\n                model\n              }}\n            >\n              <div className=\"canvas\">\n                <p> {rounds[current]}</p>\n                <Canvas ref={ref} />\n                <button\n                  type=\"button\"\n                  class=\"nes-btn is-warning\"\n                  onClick={() => {\n                    const canvas = ref.current;\n                    const ctx = canvas.getContext(\"2d\");\n                    ctx.fillRect(0, 0, canvas.height, canvas.width);\n                  }}\n                >\n                  Clear the canvas.\n                </button>\n                <p>Points : {points}</p>\n              </div>\n              <div className=\"comments\">\n                <Controls theCanvas={ref} model={model} labels={labels} />\n              </div>\n            </GameContext.Provider>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport { Game, GameContext };\n","import \"./App.css\";\nimport React from \"react\";\n\nimport { Game } from \"./Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport Typed from \"typed.js\";\n\nexport default class TypedReactDemo extends React.Component {\n  componentDidMount() {\n    // If you want to pass more options as props, simply add\n    // your desired props to this destructuring assignment.\n    const { strings } = this.props;\n    // You can pass other options here, such as typing speed, back speed, etc.\n    const options = {\n      strings: strings,\n      typeSpeed: 50,\n      showCursor: false\n    };\n    // this.el refers to the <span> in the render() method\n    this.typed = new Typed(this.el, options);\n  }\n\n  componentWillUnmount() {\n    // Make sure to destroy Typed instance on unmounting\n    // to prevent memory leaks\n    this.typed.destroy();\n  }\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        <span\n          style={{ whiteSpace: \"pre\" }}\n          ref={el => {\n            this.el = el;\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport \"nes.css/css/nes.min.css\";\nimport TypedReact from \"./Components/TypedReact\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div class=\"nes-container is-dark with-title is-centered\">\n        <h1 class=\"title\">Welcome to the wonderful Sketch Game</h1>\n        <p>\n          <TypedReact\n            strings={[\n              \"This game has been modeled-off Google's  <a href='https://quickdraw.withgoogle.com/#'>Quick, Draw!</a> game, <p>and uses a sampling from the Quick, Draw! <a href='dataset'>dataset.</a></p>  <p>Brought to you by the EPFL Extension School.</p>\"\n            ]}\n          />\n        </p>\n        <Link to=\"/Game\">\n          <button type=\"button\" class=\"nes-btn is-primary\">\n            Play Game\n          </button>\n        </Link>\n        <h6>\n          Made with <i class=\"nes-icon is-small heart\"></i> in Geneva\n        </h6>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Home from \"./Home\";\n\nfunction Root() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/Home\">\n          <Home />\n        </Route>\n        <Route path=\"/Game\">\n          <App />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Root from \"./root\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}